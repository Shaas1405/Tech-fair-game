extends KinematicBody

export var speed := 10.0
export var back_speed := 5.0
export var jump_strength := 30.0
export var gravity := 50.0

var _velocity := Vector3.ZERO
var _snap_vector := Vector3.DOWN
var _time_sec := 10
var point := 0.0

onready var _spring_arm: SpringArm = $SpringArm
onready var _model: Spatial = $Armature/Skeleton/Cube
onready var _animations: AnimationPlayer = $AnimationPlayer
onready var _Skeleton: Skeleton = $Armature/Skeleton






func _physics_process(delta: float) -> void:
	
	
	var move_direction := Vector3.ZERO
	
	if Input.get_action_strength("Right"):
		move_direction.x = Input.get_action_strength("Right")
		_animations.play("Run")
		_animations.playback_speed = 10
		_Skeleton.rotation_degrees.y = 0
		_Skeleton.rotation_degrees.y = _spring_arm.rotation_degrees.y + -270
		
	
	elif Input.get_action_strength("Left"):
		move_direction.x -= Input.get_action_strength("Left")
		_animations.play("Run")
		_animations.playback_speed = 10
		_Skeleton.rotation_degrees.y = 0
		_Skeleton.rotation_degrees.y = _spring_arm.rotation_degrees.y + -90
	
	elif Input.get_action_strength("Back"):
		move_direction.z = Input.get_action_strength("Back")
		_animations.play_backwards("Run")
		_animations.playback_speed = 5
		_Skeleton.rotation_degrees.y = 0
		_Skeleton.rotation_degrees.y = _spring_arm.rotation_degrees.y + 180
	
	elif Input.get_action_strength("Forward"):
		move_direction.z -= Input.get_action_strength("Forward")
		_animations.play("Run")
		_animations.playback_speed = 10
		_Skeleton.rotation_degrees.y = 0
		_Skeleton.rotation_degrees.y = _spring_arm.rotation_degrees.y + 180
	
	else:
		_animations.playback_speed = 3
		_animations.play("Idle")
	
	move_direction = move_direction.rotated(Vector3.UP, _spring_arm.rotation.y).normalized()
	
	_velocity.x = move_direction.x * speed
	_velocity.z = move_direction.z * speed
	_velocity.y -= gravity * delta
	
	var just_landed := is_on_floor() and _snap_vector == Vector3.ZERO
	var is_jumping := is_on_floor() and Input.get_action_strength("Jump")
	if is_jumping:
		_velocity.y = jump_strength
		_snap_vector = Vector3.ZERO
	elif just_landed:
		_snap_vector = Vector3.DOWN
		
	_velocity = move_and_slide_with_snap(_velocity, _snap_vector, Vector3.UP, true)
	
	if _velocity.length() > 0.2:
		var _look_direction = Vector2(_velocity.z, _velocity.x)
		
	

func _process(_delta: float) -> void:
	_spring_arm.translation.x = translation.x
	_spring_arm.translation.z = translation.z
	_spring_arm.translation.y = translation.y + 1




	

